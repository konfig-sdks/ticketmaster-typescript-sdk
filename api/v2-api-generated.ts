/* tslint:disable */
/* eslint-disable */
/*
Discovery API

The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

The version of the OpenAPI document: v2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Attraction } from '../models';
// @ts-ignore
import { Classification } from '../models';
// @ts-ignore
import { Event } from '../models';
// @ts-ignore
import { EventImages } from '../models';
// @ts-ignore
import { Genre } from '../models';
// @ts-ignore
import { Level } from '../models';
// @ts-ignore
import { Segment } from '../models';
// @ts-ignore
import { Venue } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * V2Api - axios parameter creator
 * @export
 */
export const V2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Find events and filter your search by location, date, availability, and much more.
         * @summary Event Search
         * @param {string} [sort] Sorting order of the search result. Allowable values : \&#39;name,asc\&#39;, \&#39;name,desc\&#39;, \&#39;date,asc\&#39;, \&#39;date,desc\&#39;, \&#39;relevance,asc\&#39;, \&#39;relevance,desc\&#39;, \&#39;distance,asc\&#39;, \&#39;name,date,asc\&#39;, \&#39;name,date,desc\&#39;, \&#39;date,name,asc\&#39;, \&#39;date,name,desc\&#39;,\&#39;onsaleStartDate,asc\&#39;, \&#39;id,asc\&#39;
         * @param {string} [startDateTime] Filter events with a start date after this date
         * @param {string} [endDateTime] Filter events with a start date before this date
         * @param {string} [onsaleStartDateTime] Filter events with onsale start date after this date
         * @param {string} [onsaleOnStartDate] Filter events with onsale start date on this date
         * @param {string} [onsaleOnAfterStartDate] Filter events with onsale range within this date
         * @param {string} [onsaleEndDateTime] Filter events with onsale end date before this date
         * @param {string} [city] Filter events by city
         * @param {string} [countryCode] Filter events by country code
         * @param {string} [stateCode] Filter events by state code
         * @param {string} [postalCode] Filter events by postal code / zipcode
         * @param {string} [venueId] Filter events by venue id
         * @param {string} [attractionId] Filter events by attraction id
         * @param {string} [segmentId] Filter events by segment id
         * @param {string} [segmentName] Filter events by segment name
         * @param {Array<any>} [classificationName] Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type
         * @param {Array<any>} [classificationId] Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type
         * @param {string} [marketId] Filter events by market id
         * @param {string} [promoterId] Filter events by promoter id
         * @param {string} [dmaId] Filter events by dma id
         * @param {'true' | ' no' | ' only'} [includeTBA] True, to include events with date to be announce (TBA)
         * @param {'true' | ' no' | ' only'} [includeTBD] True, to include event with a date to be defined (TBD)
         * @param {string} [clientVisibility] Filter events by clientName
         * @param {string} [latlong] Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
         * @param {string} [radius] Radius of the area in which we want to search for events.
         * @param {'miles' | 'km'} [unit] Unit of the radius
         * @param {string} [geoPoint] filter events by geoHash
         * @param {string} [keyword] Keyword to search on
         * @param {string} [id] Filter entities by its id
         * @param {'ticketmaster' | ' universe' | ' frontgate' | ' tmr'} [source] Filter entities by its source name
         * @param {'true' | ' no' | ' only'} [includeTest] True if you want to have entities flag as test in the response. Only, if you only wanted test entities
         * @param {string} [page] Page number
         * @param {string} [size] Page size of the response
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] Yes if you want to display licensed content
         * @param {'true' | ' no'} [includeSpellcheck] yes, to include spell check suggestions in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSearch: async (sort?: string, startDateTime?: string, endDateTime?: string, onsaleStartDateTime?: string, onsaleOnStartDate?: string, onsaleOnAfterStartDate?: string, onsaleEndDateTime?: string, city?: string, countryCode?: string, stateCode?: string, postalCode?: string, venueId?: string, attractionId?: string, segmentId?: string, segmentName?: string, classificationName?: Array<any>, classificationId?: Array<any>, marketId?: string, promoterId?: string, dmaId?: string, includeTBA?: 'true' | ' no' | ' only', includeTBD?: 'true' | ' no' | ' only', clientVisibility?: string, latlong?: string, radius?: string, unit?: 'miles' | 'km', geoPoint?: string, keyword?: string, id?: string, source?: 'ticketmaster' | ' universe' | ' frontgate' | ' tmr', includeTest?: 'true' | ' no' | ' only', page?: string, size?: string, locale?: string, includeLicensedContent?: 'true' | ' no', includeSpellcheck?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/discovery/v2/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (startDateTime !== undefined) {
                localVarQueryParameter['startDateTime'] = startDateTime;
            }

            if (endDateTime !== undefined) {
                localVarQueryParameter['endDateTime'] = endDateTime;
            }

            if (onsaleStartDateTime !== undefined) {
                localVarQueryParameter['onsaleStartDateTime'] = onsaleStartDateTime;
            }

            if (onsaleOnStartDate !== undefined) {
                localVarQueryParameter['onsaleOnStartDate'] = onsaleOnStartDate;
            }

            if (onsaleOnAfterStartDate !== undefined) {
                localVarQueryParameter['onsaleOnAfterStartDate'] = onsaleOnAfterStartDate;
            }

            if (onsaleEndDateTime !== undefined) {
                localVarQueryParameter['onsaleEndDateTime'] = onsaleEndDateTime;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (stateCode !== undefined) {
                localVarQueryParameter['stateCode'] = stateCode;
            }

            if (postalCode !== undefined) {
                localVarQueryParameter['postalCode'] = postalCode;
            }

            if (venueId !== undefined) {
                localVarQueryParameter['venueId'] = venueId;
            }

            if (attractionId !== undefined) {
                localVarQueryParameter['attractionId'] = attractionId;
            }

            if (segmentId !== undefined) {
                localVarQueryParameter['segmentId'] = segmentId;
            }

            if (segmentName !== undefined) {
                localVarQueryParameter['segmentName'] = segmentName;
            }

            if (classificationName) {
                localVarQueryParameter['classificationName'] = classificationName;
            }

            if (classificationId) {
                localVarQueryParameter['classificationId'] = classificationId;
            }

            if (marketId !== undefined) {
                localVarQueryParameter['marketId'] = marketId;
            }

            if (promoterId !== undefined) {
                localVarQueryParameter['promoterId'] = promoterId;
            }

            if (dmaId !== undefined) {
                localVarQueryParameter['dmaId'] = dmaId;
            }

            if (includeTBA !== undefined) {
                localVarQueryParameter['includeTBA'] = includeTBA;
            }

            if (includeTBD !== undefined) {
                localVarQueryParameter['includeTBD'] = includeTBD;
            }

            if (clientVisibility !== undefined) {
                localVarQueryParameter['clientVisibility'] = clientVisibility;
            }

            if (latlong !== undefined) {
                localVarQueryParameter['latlong'] = latlong;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (unit !== undefined) {
                localVarQueryParameter['unit'] = unit;
            }

            if (geoPoint !== undefined) {
                localVarQueryParameter['geoPoint'] = geoPoint;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (includeTest !== undefined) {
                localVarQueryParameter['includeTest'] = includeTest;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }

            if (includeSpellcheck !== undefined) {
                localVarQueryParameter['includeSpellcheck'] = includeSpellcheck;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find search suggestions and filter your suggestions by location, source, etc.
         * @summary Find Suggest
         * @param {string} [keyword] Keyword to search on
         * @param {'ticketmaster' | ' universe' | ' frontgate' | ' tmr'} [source] Filter entities by its source name
         * @param {string} [latlong] Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
         * @param {string} [radius] Radius of the area in which we want to search for events.
         * @param {'miles' | 'km'} [unit] Unit of the radius
         * @param {string} [size] Size of every entity returned in the response
         * @param {'true' | ' no'} [includeFuzzy] yes, to include fuzzy matches in the search. This has performance impact.
         * @param {string} [clientVisibility] Filter events to clientName
         * @param {string} [countryCode] Filter suggestions by country code
         * @param {'true' | ' no' | ' only'} [includeTBA] True, to include events with date to be announce (TBA)
         * @param {'true' | ' no' | ' only'} [includeTBD] True, to include event with a date to be defined (TBD)
         * @param {string} [segmentId] Filter suggestions by segment id
         * @param {string} [geoPoint] filter events by geoHash
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] Yes if you want to display licensed content
         * @param {'true' | ' no'} [includeSpellcheck] yes, to include spell check suggestions in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSuggest: async (keyword?: string, source?: 'ticketmaster' | ' universe' | ' frontgate' | ' tmr', latlong?: string, radius?: string, unit?: 'miles' | 'km', size?: string, includeFuzzy?: 'true' | ' no', clientVisibility?: string, countryCode?: string, includeTBA?: 'true' | ' no' | ' only', includeTBD?: 'true' | ' no' | ' only', segmentId?: string, geoPoint?: string, locale?: string, includeLicensedContent?: 'true' | ' no', includeSpellcheck?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/discovery/v2/suggest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (latlong !== undefined) {
                localVarQueryParameter['latlong'] = latlong;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (unit !== undefined) {
                localVarQueryParameter['unit'] = unit;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (includeFuzzy !== undefined) {
                localVarQueryParameter['includeFuzzy'] = includeFuzzy;
            }

            if (clientVisibility !== undefined) {
                localVarQueryParameter['clientVisibility'] = clientVisibility;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (includeTBA !== undefined) {
                localVarQueryParameter['includeTBA'] = includeTBA;
            }

            if (includeTBD !== undefined) {
                localVarQueryParameter['includeTBD'] = includeTBD;
            }

            if (segmentId !== undefined) {
                localVarQueryParameter['segmentId'] = segmentId;
            }

            if (geoPoint !== undefined) {
                localVarQueryParameter['geoPoint'] = geoPoint;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }

            if (includeSpellcheck !== undefined) {
                localVarQueryParameter['includeSpellcheck'] = includeSpellcheck;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/suggest',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find venues and filter your search by name, and much more.
         * @summary Venue Search
         * @param {string} [sort] Sorting order of the search result. Allowable Values: \&#39;name,asc\&#39;, \&#39;name,desc\&#39;, \&#39;relevance,asc\&#39;, \&#39;relevance,desc\&#39;, \&#39;distance,asc\&#39;, \&#39;distance,desc\&#39;
         * @param {string} [stateCode] Filter venues by state / province code
         * @param {string} [countryCode] Filter venues by country code
         * @param {string} [latlong] Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
         * @param {string} [radius] Radius of the area in which we want to search for events.
         * @param {'miles' | 'km'} [unit] Unit of the radius
         * @param {string} [geoPoint] filter events by geoHash
         * @param {string} [keyword] Keyword to search on
         * @param {string} [id] Filter entities by its id
         * @param {'ticketmaster' | ' universe' | ' frontgate' | ' tmr'} [source] Filter entities by its source name
         * @param {'true' | ' no' | ' only'} [includeTest] True if you want to have entities flag as test in the response. Only, if you only wanted test entities
         * @param {string} [page] Page number
         * @param {string} [size] Page size of the response
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] Yes if you want to display licensed content
         * @param {'true' | ' no'} [includeSpellcheck] yes, to include spell check suggestions in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findVenues: async (sort?: string, stateCode?: string, countryCode?: string, latlong?: string, radius?: string, unit?: 'miles' | 'km', geoPoint?: string, keyword?: string, id?: string, source?: 'ticketmaster' | ' universe' | ' frontgate' | ' tmr', includeTest?: 'true' | ' no' | ' only', page?: string, size?: string, locale?: string, includeLicensedContent?: 'true' | ' no', includeSpellcheck?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/discovery/v2/venues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (stateCode !== undefined) {
                localVarQueryParameter['stateCode'] = stateCode;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (latlong !== undefined) {
                localVarQueryParameter['latlong'] = latlong;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (unit !== undefined) {
                localVarQueryParameter['unit'] = unit;
            }

            if (geoPoint !== undefined) {
                localVarQueryParameter['geoPoint'] = geoPoint;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (includeTest !== undefined) {
                localVarQueryParameter['includeTest'] = includeTest;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }

            if (includeSpellcheck !== undefined) {
                localVarQueryParameter['includeSpellcheck'] = includeSpellcheck;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/venues',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a specific attraction using the unique identifier for the attraction.
         * @summary Get Attraction Details
         * @param {string} id ID of the attraction
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] True if you want to display licensed content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttractionDetails: async (id: string, locale?: string, includeLicensedContent?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAttractionDetails', 'id', id)
            const localVarPath = `/discovery/v2/attractions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/attractions/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a specific segment, genre, or sub-genre using its unique identifier.
         * @summary Get Classification Details
         * @param {string} id ID of the segment, genre, or sub-genre
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] True if you want to display licensed content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassificationDetails: async (id: string, locale?: string, includeLicensedContent?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClassificationDetails', 'id', id)
            const localVarPath = `/discovery/v2/classifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/classifications/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.
         * @summary Get Event Details
         * @param {string} id ID of the event
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] True if you want to display licensed content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventDetails: async (id: string, locale?: string, includeLicensedContent?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEventDetails', 'id', id)
            const localVarPath = `/discovery/v2/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/events/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get images for a specific event using the unique identifier for the event.
         * @summary Get Event Images
         * @param {string} id ID of the event
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] True if you want to display licensed content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventImages: async (id: string, locale?: string, includeLicensedContent?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEventImages', 'id', id)
            const localVarPath = `/discovery/v2/events/{id}/images`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/events/{id}/images',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a specific genre using its unique identifier.
         * @summary Get Genre Details
         * @param {string} id ID of the genre
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] True if you want to display licensed content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreDetails: async (id: string, locale?: string, includeLicensedContent?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGenreDetails', 'id', id)
            const localVarPath = `/discovery/v2/classifications/genres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/classifications/genres/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a specific segment using its unique identifier.
         * @summary Get Segment Details
         * @param {string} id ID of the segment
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] True if you want to display licensed content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegmentDetails: async (id: string, locale?: string, includeLicensedContent?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSegmentDetails', 'id', id)
            const localVarPath = `/discovery/v2/classifications/segments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/classifications/segments/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a specific sub-genre using its unique identifier.
         * @summary Get Sub-Genre Details
         * @param {string} id ID of the subgenre
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] True if you want to display licensed content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubgenreDetails: async (id: string, locale?: string, includeLicensedContent?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSubgenreDetails', 'id', id)
            const localVarPath = `/discovery/v2/classifications/subgenres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/classifications/subgenres/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a specific venue using the unique identifier for the venue.
         * @summary Get Venue Details
         * @param {string} id ID of the venue
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] True if you want to display licensed content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVenueDetails: async (id: string, locale?: string, includeLicensedContent?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVenueDetails', 'id', id)
            const localVarPath = `/discovery/v2/venues/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/venues/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.
         * @summary Attraction Search
         * @param {string} [sort] Sorting order of the search result. Allowable Values : \&#39;name,asc\&#39;, \&#39;name,desc\&#39;, \&#39;relevance,asc\&#39;, \&#39;relevance,desc\&#39;
         * @param {Array<any>} [classificationName] Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type
         * @param {Array<any>} [classificationId] Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type
         * @param {string} [keyword] Keyword to search on
         * @param {string} [id] Filter entities by its id
         * @param {'ticketmaster' | ' universe' | ' frontgate' | ' tmr'} [source] Filter entities by its source name
         * @param {'true' | ' no' | ' only'} [includeTest] True if you want to have entities flag as test in the response. Only, if you only wanted test entities
         * @param {string} [page] Page number
         * @param {string} [size] Page size of the response
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] Yes if you want to display licensed content
         * @param {'true' | ' no'} [includeSpellcheck] yes, to include spell check suggestions in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAttractions: async (sort?: string, classificationName?: Array<any>, classificationId?: Array<any>, keyword?: string, id?: string, source?: 'ticketmaster' | ' universe' | ' frontgate' | ' tmr', includeTest?: 'true' | ' no' | ' only', page?: string, size?: string, locale?: string, includeLicensedContent?: 'true' | ' no', includeSpellcheck?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/discovery/v2/attractions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (classificationName) {
                localVarQueryParameter['classificationName'] = classificationName;
            }

            if (classificationId) {
                localVarQueryParameter['classificationId'] = classificationId;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (includeTest !== undefined) {
                localVarQueryParameter['includeTest'] = includeTest;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }

            if (includeSpellcheck !== undefined) {
                localVarQueryParameter['includeSpellcheck'] = includeSpellcheck;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/attractions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.
         * @summary Classification Search
         * @param {string} [sort] Sorting order of the search result
         * @param {string} [keyword] Keyword to search on
         * @param {string} [id] Filter entities by its id
         * @param {'ticketmaster' | ' universe' | ' frontgate' | ' tmr'} [source] Filter entities by its source name
         * @param {'true' | ' no' | ' only'} [includeTest] True if you want to have entities flag as test in the response. Only, if you only wanted test entities
         * @param {string} [page] Page number
         * @param {string} [size] Page size of the response
         * @param {string} [locale] The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \&#39;en\&#39; or \&#39;fr\&#39;) then the first matching locale is used. When using a \&#39;*\&#39; it matches all locales. \&#39;*\&#39; can only be used at the end (e.g. \&#39;en-us,en,*\&#39;) 
         * @param {'true' | ' no'} [includeLicensedContent] Yes if you want to display licensed content
         * @param {'true' | ' no'} [includeSpellcheck] yes, to include spell check suggestions in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchClassifications: async (sort?: string, keyword?: string, id?: string, source?: 'ticketmaster' | ' universe' | ' frontgate' | ' tmr', includeTest?: 'true' | ' no' | ' only', page?: string, size?: string, locale?: string, includeLicensedContent?: 'true' | ' no', includeSpellcheck?: 'true' | ' no', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/discovery/v2/classifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({object: localVarQueryParameter, key: "apikey", keyParamName: "apiKey", configuration})
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (includeTest !== undefined) {
                localVarQueryParameter['includeTest'] = includeTest;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (includeLicensedContent !== undefined) {
                localVarQueryParameter['includeLicensedContent'] = includeLicensedContent;
            }

            if (includeSpellcheck !== undefined) {
                localVarQueryParameter['includeSpellcheck'] = includeSpellcheck;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/discovery/v2/classifications',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2Api - functional programming interface
 * @export
 */
export const V2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ApiAxiosParamCreator(configuration)
    return {
        /**
         * Find events and filter your search by location, date, availability, and much more.
         * @summary Event Search
         * @param {V2ApiEventSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSearch(requestParameters: V2ApiEventSearchRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventSearch(requestParameters.sort, requestParameters.startDateTime, requestParameters.endDateTime, requestParameters.onsaleStartDateTime, requestParameters.onsaleOnStartDate, requestParameters.onsaleOnAfterStartDate, requestParameters.onsaleEndDateTime, requestParameters.city, requestParameters.countryCode, requestParameters.stateCode, requestParameters.postalCode, requestParameters.venueId, requestParameters.attractionId, requestParameters.segmentId, requestParameters.segmentName, requestParameters.classificationName, requestParameters.classificationId, requestParameters.marketId, requestParameters.promoterId, requestParameters.dmaId, requestParameters.includeTBA, requestParameters.includeTBD, requestParameters.clientVisibility, requestParameters.latlong, requestParameters.radius, requestParameters.unit, requestParameters.geoPoint, requestParameters.keyword, requestParameters.id, requestParameters.source, requestParameters.includeTest, requestParameters.page, requestParameters.size, requestParameters.locale, requestParameters.includeLicensedContent, requestParameters.includeSpellcheck, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find search suggestions and filter your suggestions by location, source, etc.
         * @summary Find Suggest
         * @param {V2ApiFindSuggestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSuggest(requestParameters: V2ApiFindSuggestRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSuggest(requestParameters.keyword, requestParameters.source, requestParameters.latlong, requestParameters.radius, requestParameters.unit, requestParameters.size, requestParameters.includeFuzzy, requestParameters.clientVisibility, requestParameters.countryCode, requestParameters.includeTBA, requestParameters.includeTBD, requestParameters.segmentId, requestParameters.geoPoint, requestParameters.locale, requestParameters.includeLicensedContent, requestParameters.includeSpellcheck, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find venues and filter your search by name, and much more.
         * @summary Venue Search
         * @param {V2ApiFindVenuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findVenues(requestParameters: V2ApiFindVenuesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Venue>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findVenues(requestParameters.sort, requestParameters.stateCode, requestParameters.countryCode, requestParameters.latlong, requestParameters.radius, requestParameters.unit, requestParameters.geoPoint, requestParameters.keyword, requestParameters.id, requestParameters.source, requestParameters.includeTest, requestParameters.page, requestParameters.size, requestParameters.locale, requestParameters.includeLicensedContent, requestParameters.includeSpellcheck, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details for a specific attraction using the unique identifier for the attraction.
         * @summary Get Attraction Details
         * @param {V2ApiGetAttractionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttractionDetails(requestParameters: V2ApiGetAttractionDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attraction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttractionDetails(requestParameters.id, requestParameters.locale, requestParameters.includeLicensedContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details for a specific segment, genre, or sub-genre using its unique identifier.
         * @summary Get Classification Details
         * @param {V2ApiGetClassificationDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassificationDetails(requestParameters: V2ApiGetClassificationDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Classification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClassificationDetails(requestParameters.id, requestParameters.locale, requestParameters.includeLicensedContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.
         * @summary Get Event Details
         * @param {V2ApiGetEventDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventDetails(requestParameters: V2ApiGetEventDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventDetails(requestParameters.id, requestParameters.locale, requestParameters.includeLicensedContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get images for a specific event using the unique identifier for the event.
         * @summary Get Event Images
         * @param {V2ApiGetEventImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventImages(requestParameters: V2ApiGetEventImagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventImages>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventImages(requestParameters.id, requestParameters.locale, requestParameters.includeLicensedContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details for a specific genre using its unique identifier.
         * @summary Get Genre Details
         * @param {V2ApiGetGenreDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGenreDetails(requestParameters: V2ApiGetGenreDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Genre>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGenreDetails(requestParameters.id, requestParameters.locale, requestParameters.includeLicensedContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details for a specific segment using its unique identifier.
         * @summary Get Segment Details
         * @param {V2ApiGetSegmentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSegmentDetails(requestParameters: V2ApiGetSegmentDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSegmentDetails(requestParameters.id, requestParameters.locale, requestParameters.includeLicensedContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details for a specific sub-genre using its unique identifier.
         * @summary Get Sub-Genre Details
         * @param {V2ApiGetSubgenreDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubgenreDetails(requestParameters: V2ApiGetSubgenreDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Level>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubgenreDetails(requestParameters.id, requestParameters.locale, requestParameters.includeLicensedContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details for a specific venue using the unique identifier for the venue.
         * @summary Get Venue Details
         * @param {V2ApiGetVenueDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVenueDetails(requestParameters: V2ApiGetVenueDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Venue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVenueDetails(requestParameters.id, requestParameters.locale, requestParameters.includeLicensedContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.
         * @summary Attraction Search
         * @param {V2ApiSearchAttractionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAttractions(requestParameters: V2ApiSearchAttractionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Attraction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAttractions(requestParameters.sort, requestParameters.classificationName, requestParameters.classificationId, requestParameters.keyword, requestParameters.id, requestParameters.source, requestParameters.includeTest, requestParameters.page, requestParameters.size, requestParameters.locale, requestParameters.includeLicensedContent, requestParameters.includeSpellcheck, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.
         * @summary Classification Search
         * @param {V2ApiSearchClassificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchClassifications(requestParameters: V2ApiSearchClassificationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Classification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchClassifications(requestParameters.sort, requestParameters.keyword, requestParameters.id, requestParameters.source, requestParameters.includeTest, requestParameters.page, requestParameters.size, requestParameters.locale, requestParameters.includeLicensedContent, requestParameters.includeSpellcheck, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V2Api - factory interface
 * @export
 */
export const V2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ApiFp(configuration)
    return {
        /**
         * Find events and filter your search by location, date, availability, and much more.
         * @summary Event Search
         * @param {V2ApiEventSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSearch(requestParameters: V2ApiEventSearchRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.eventSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Find search suggestions and filter your suggestions by location, source, etc.
         * @summary Find Suggest
         * @param {V2ApiFindSuggestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSuggest(requestParameters: V2ApiFindSuggestRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.findSuggest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Find venues and filter your search by name, and much more.
         * @summary Venue Search
         * @param {V2ApiFindVenuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findVenues(requestParameters: V2ApiFindVenuesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Venue>> {
            return localVarFp.findVenues(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a specific attraction using the unique identifier for the attraction.
         * @summary Get Attraction Details
         * @param {V2ApiGetAttractionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttractionDetails(requestParameters: V2ApiGetAttractionDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Attraction> {
            return localVarFp.getAttractionDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a specific segment, genre, or sub-genre using its unique identifier.
         * @summary Get Classification Details
         * @param {V2ApiGetClassificationDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassificationDetails(requestParameters: V2ApiGetClassificationDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Classification> {
            return localVarFp.getClassificationDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.
         * @summary Get Event Details
         * @param {V2ApiGetEventDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventDetails(requestParameters: V2ApiGetEventDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Event> {
            return localVarFp.getEventDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get images for a specific event using the unique identifier for the event.
         * @summary Get Event Images
         * @param {V2ApiGetEventImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventImages(requestParameters: V2ApiGetEventImagesRequest, options?: AxiosRequestConfig): AxiosPromise<EventImages> {
            return localVarFp.getEventImages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a specific genre using its unique identifier.
         * @summary Get Genre Details
         * @param {V2ApiGetGenreDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreDetails(requestParameters: V2ApiGetGenreDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Genre> {
            return localVarFp.getGenreDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a specific segment using its unique identifier.
         * @summary Get Segment Details
         * @param {V2ApiGetSegmentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegmentDetails(requestParameters: V2ApiGetSegmentDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Segment> {
            return localVarFp.getSegmentDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a specific sub-genre using its unique identifier.
         * @summary Get Sub-Genre Details
         * @param {V2ApiGetSubgenreDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubgenreDetails(requestParameters: V2ApiGetSubgenreDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Level> {
            return localVarFp.getSubgenreDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a specific venue using the unique identifier for the venue.
         * @summary Get Venue Details
         * @param {V2ApiGetVenueDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVenueDetails(requestParameters: V2ApiGetVenueDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Venue> {
            return localVarFp.getVenueDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.
         * @summary Attraction Search
         * @param {V2ApiSearchAttractionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAttractions(requestParameters: V2ApiSearchAttractionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Attraction>> {
            return localVarFp.searchAttractions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.
         * @summary Classification Search
         * @param {V2ApiSearchClassificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchClassifications(requestParameters: V2ApiSearchClassificationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Classification>> {
            return localVarFp.searchClassifications(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for eventSearch operation in V2Api.
 * @export
 * @interface V2ApiEventSearchRequest
 */
export type V2ApiEventSearchRequest = {
    
    /**
    * Sorting order of the search result. Allowable values : \'name,asc\', \'name,desc\', \'date,asc\', \'date,desc\', \'relevance,asc\', \'relevance,desc\', \'distance,asc\', \'name,date,asc\', \'name,date,desc\', \'date,name,asc\', \'date,name,desc\',\'onsaleStartDate,asc\', \'id,asc\'
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly sort?: string
    
    /**
    * Filter events with a start date after this date
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly startDateTime?: string
    
    /**
    * Filter events with a start date before this date
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly endDateTime?: string
    
    /**
    * Filter events with onsale start date after this date
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly onsaleStartDateTime?: string
    
    /**
    * Filter events with onsale start date on this date
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly onsaleOnStartDate?: string
    
    /**
    * Filter events with onsale range within this date
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly onsaleOnAfterStartDate?: string
    
    /**
    * Filter events with onsale end date before this date
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly onsaleEndDateTime?: string
    
    /**
    * Filter events by city
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly city?: string
    
    /**
    * Filter events by country code
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly countryCode?: string
    
    /**
    * Filter events by state code
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly stateCode?: string
    
    /**
    * Filter events by postal code / zipcode
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly postalCode?: string
    
    /**
    * Filter events by venue id
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly venueId?: string
    
    /**
    * Filter events by attraction id
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly attractionId?: string
    
    /**
    * Filter events by segment id
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly segmentId?: string
    
    /**
    * Filter events by segment name
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly segmentName?: string
    
    /**
    * Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type
    * @type {Array<any>}
    * @memberof V2ApiEventSearch
    */
    readonly classificationName?: Array<any>
    
    /**
    * Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type
    * @type {Array<any>}
    * @memberof V2ApiEventSearch
    */
    readonly classificationId?: Array<any>
    
    /**
    * Filter events by market id
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly marketId?: string
    
    /**
    * Filter events by promoter id
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly promoterId?: string
    
    /**
    * Filter events by dma id
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly dmaId?: string
    
    /**
    * True, to include events with date to be announce (TBA)
    * @type {'true' | ' no' | ' only'}
    * @memberof V2ApiEventSearch
    */
    readonly includeTBA?: 'true' | ' no' | ' only'
    
    /**
    * True, to include event with a date to be defined (TBD)
    * @type {'true' | ' no' | ' only'}
    * @memberof V2ApiEventSearch
    */
    readonly includeTBD?: 'true' | ' no' | ' only'
    
    /**
    * Filter events by clientName
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly clientVisibility?: string
    
    /**
    * Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly latlong?: string
    
    /**
    * Radius of the area in which we want to search for events.
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly radius?: string
    
    /**
    * Unit of the radius
    * @type {'miles' | 'km'}
    * @memberof V2ApiEventSearch
    */
    readonly unit?: 'miles' | 'km'
    
    /**
    * filter events by geoHash
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly geoPoint?: string
    
    /**
    * Keyword to search on
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly keyword?: string
    
    /**
    * Filter entities by its id
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly id?: string
    
    /**
    * Filter entities by its source name
    * @type {'ticketmaster' | ' universe' | ' frontgate' | ' tmr'}
    * @memberof V2ApiEventSearch
    */
    readonly source?: 'ticketmaster' | ' universe' | ' frontgate' | ' tmr'
    
    /**
    * True if you want to have entities flag as test in the response. Only, if you only wanted test entities
    * @type {'true' | ' no' | ' only'}
    * @memberof V2ApiEventSearch
    */
    readonly includeTest?: 'true' | ' no' | ' only'
    
    /**
    * Page number
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly page?: string
    
    /**
    * Page size of the response
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly size?: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiEventSearch
    */
    readonly locale?: string
    
    /**
    * Yes if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiEventSearch
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
    /**
    * yes, to include spell check suggestions in the response.
    * @type {'true' | ' no'}
    * @memberof V2ApiEventSearch
    */
    readonly includeSpellcheck?: 'true' | ' no'
    
}

/**
 * Request parameters for findSuggest operation in V2Api.
 * @export
 * @interface V2ApiFindSuggestRequest
 */
export type V2ApiFindSuggestRequest = {
    
    /**
    * Keyword to search on
    * @type {string}
    * @memberof V2ApiFindSuggest
    */
    readonly keyword?: string
    
    /**
    * Filter entities by its source name
    * @type {'ticketmaster' | ' universe' | ' frontgate' | ' tmr'}
    * @memberof V2ApiFindSuggest
    */
    readonly source?: 'ticketmaster' | ' universe' | ' frontgate' | ' tmr'
    
    /**
    * Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
    * @type {string}
    * @memberof V2ApiFindSuggest
    */
    readonly latlong?: string
    
    /**
    * Radius of the area in which we want to search for events.
    * @type {string}
    * @memberof V2ApiFindSuggest
    */
    readonly radius?: string
    
    /**
    * Unit of the radius
    * @type {'miles' | 'km'}
    * @memberof V2ApiFindSuggest
    */
    readonly unit?: 'miles' | 'km'
    
    /**
    * Size of every entity returned in the response
    * @type {string}
    * @memberof V2ApiFindSuggest
    */
    readonly size?: string
    
    /**
    * yes, to include fuzzy matches in the search. This has performance impact.
    * @type {'true' | ' no'}
    * @memberof V2ApiFindSuggest
    */
    readonly includeFuzzy?: 'true' | ' no'
    
    /**
    * Filter events to clientName
    * @type {string}
    * @memberof V2ApiFindSuggest
    */
    readonly clientVisibility?: string
    
    /**
    * Filter suggestions by country code
    * @type {string}
    * @memberof V2ApiFindSuggest
    */
    readonly countryCode?: string
    
    /**
    * True, to include events with date to be announce (TBA)
    * @type {'true' | ' no' | ' only'}
    * @memberof V2ApiFindSuggest
    */
    readonly includeTBA?: 'true' | ' no' | ' only'
    
    /**
    * True, to include event with a date to be defined (TBD)
    * @type {'true' | ' no' | ' only'}
    * @memberof V2ApiFindSuggest
    */
    readonly includeTBD?: 'true' | ' no' | ' only'
    
    /**
    * Filter suggestions by segment id
    * @type {string}
    * @memberof V2ApiFindSuggest
    */
    readonly segmentId?: string
    
    /**
    * filter events by geoHash
    * @type {string}
    * @memberof V2ApiFindSuggest
    */
    readonly geoPoint?: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiFindSuggest
    */
    readonly locale?: string
    
    /**
    * Yes if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiFindSuggest
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
    /**
    * yes, to include spell check suggestions in the response.
    * @type {'true' | ' no'}
    * @memberof V2ApiFindSuggest
    */
    readonly includeSpellcheck?: 'true' | ' no'
    
}

/**
 * Request parameters for findVenues operation in V2Api.
 * @export
 * @interface V2ApiFindVenuesRequest
 */
export type V2ApiFindVenuesRequest = {
    
    /**
    * Sorting order of the search result. Allowable Values: \'name,asc\', \'name,desc\', \'relevance,asc\', \'relevance,desc\', \'distance,asc\', \'distance,desc\'
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly sort?: string
    
    /**
    * Filter venues by state / province code
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly stateCode?: string
    
    /**
    * Filter venues by country code
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly countryCode?: string
    
    /**
    * Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly latlong?: string
    
    /**
    * Radius of the area in which we want to search for events.
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly radius?: string
    
    /**
    * Unit of the radius
    * @type {'miles' | 'km'}
    * @memberof V2ApiFindVenues
    */
    readonly unit?: 'miles' | 'km'
    
    /**
    * filter events by geoHash
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly geoPoint?: string
    
    /**
    * Keyword to search on
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly keyword?: string
    
    /**
    * Filter entities by its id
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly id?: string
    
    /**
    * Filter entities by its source name
    * @type {'ticketmaster' | ' universe' | ' frontgate' | ' tmr'}
    * @memberof V2ApiFindVenues
    */
    readonly source?: 'ticketmaster' | ' universe' | ' frontgate' | ' tmr'
    
    /**
    * True if you want to have entities flag as test in the response. Only, if you only wanted test entities
    * @type {'true' | ' no' | ' only'}
    * @memberof V2ApiFindVenues
    */
    readonly includeTest?: 'true' | ' no' | ' only'
    
    /**
    * Page number
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly page?: string
    
    /**
    * Page size of the response
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly size?: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiFindVenues
    */
    readonly locale?: string
    
    /**
    * Yes if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiFindVenues
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
    /**
    * yes, to include spell check suggestions in the response.
    * @type {'true' | ' no'}
    * @memberof V2ApiFindVenues
    */
    readonly includeSpellcheck?: 'true' | ' no'
    
}

/**
 * Request parameters for getAttractionDetails operation in V2Api.
 * @export
 * @interface V2ApiGetAttractionDetailsRequest
 */
export type V2ApiGetAttractionDetailsRequest = {
    
    /**
    * ID of the attraction
    * @type {string}
    * @memberof V2ApiGetAttractionDetails
    */
    readonly id: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiGetAttractionDetails
    */
    readonly locale?: string
    
    /**
    * True if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiGetAttractionDetails
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
}

/**
 * Request parameters for getClassificationDetails operation in V2Api.
 * @export
 * @interface V2ApiGetClassificationDetailsRequest
 */
export type V2ApiGetClassificationDetailsRequest = {
    
    /**
    * ID of the segment, genre, or sub-genre
    * @type {string}
    * @memberof V2ApiGetClassificationDetails
    */
    readonly id: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiGetClassificationDetails
    */
    readonly locale?: string
    
    /**
    * True if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiGetClassificationDetails
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
}

/**
 * Request parameters for getEventDetails operation in V2Api.
 * @export
 * @interface V2ApiGetEventDetailsRequest
 */
export type V2ApiGetEventDetailsRequest = {
    
    /**
    * ID of the event
    * @type {string}
    * @memberof V2ApiGetEventDetails
    */
    readonly id: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiGetEventDetails
    */
    readonly locale?: string
    
    /**
    * True if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiGetEventDetails
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
}

/**
 * Request parameters for getEventImages operation in V2Api.
 * @export
 * @interface V2ApiGetEventImagesRequest
 */
export type V2ApiGetEventImagesRequest = {
    
    /**
    * ID of the event
    * @type {string}
    * @memberof V2ApiGetEventImages
    */
    readonly id: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiGetEventImages
    */
    readonly locale?: string
    
    /**
    * True if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiGetEventImages
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
}

/**
 * Request parameters for getGenreDetails operation in V2Api.
 * @export
 * @interface V2ApiGetGenreDetailsRequest
 */
export type V2ApiGetGenreDetailsRequest = {
    
    /**
    * ID of the genre
    * @type {string}
    * @memberof V2ApiGetGenreDetails
    */
    readonly id: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiGetGenreDetails
    */
    readonly locale?: string
    
    /**
    * True if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiGetGenreDetails
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
}

/**
 * Request parameters for getSegmentDetails operation in V2Api.
 * @export
 * @interface V2ApiGetSegmentDetailsRequest
 */
export type V2ApiGetSegmentDetailsRequest = {
    
    /**
    * ID of the segment
    * @type {string}
    * @memberof V2ApiGetSegmentDetails
    */
    readonly id: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiGetSegmentDetails
    */
    readonly locale?: string
    
    /**
    * True if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiGetSegmentDetails
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
}

/**
 * Request parameters for getSubgenreDetails operation in V2Api.
 * @export
 * @interface V2ApiGetSubgenreDetailsRequest
 */
export type V2ApiGetSubgenreDetailsRequest = {
    
    /**
    * ID of the subgenre
    * @type {string}
    * @memberof V2ApiGetSubgenreDetails
    */
    readonly id: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiGetSubgenreDetails
    */
    readonly locale?: string
    
    /**
    * True if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiGetSubgenreDetails
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
}

/**
 * Request parameters for getVenueDetails operation in V2Api.
 * @export
 * @interface V2ApiGetVenueDetailsRequest
 */
export type V2ApiGetVenueDetailsRequest = {
    
    /**
    * ID of the venue
    * @type {string}
    * @memberof V2ApiGetVenueDetails
    */
    readonly id: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiGetVenueDetails
    */
    readonly locale?: string
    
    /**
    * True if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiGetVenueDetails
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
}

/**
 * Request parameters for searchAttractions operation in V2Api.
 * @export
 * @interface V2ApiSearchAttractionsRequest
 */
export type V2ApiSearchAttractionsRequest = {
    
    /**
    * Sorting order of the search result. Allowable Values : \'name,asc\', \'name,desc\', \'relevance,asc\', \'relevance,desc\'
    * @type {string}
    * @memberof V2ApiSearchAttractions
    */
    readonly sort?: string
    
    /**
    * Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type
    * @type {Array<any>}
    * @memberof V2ApiSearchAttractions
    */
    readonly classificationName?: Array<any>
    
    /**
    * Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type
    * @type {Array<any>}
    * @memberof V2ApiSearchAttractions
    */
    readonly classificationId?: Array<any>
    
    /**
    * Keyword to search on
    * @type {string}
    * @memberof V2ApiSearchAttractions
    */
    readonly keyword?: string
    
    /**
    * Filter entities by its id
    * @type {string}
    * @memberof V2ApiSearchAttractions
    */
    readonly id?: string
    
    /**
    * Filter entities by its source name
    * @type {'ticketmaster' | ' universe' | ' frontgate' | ' tmr'}
    * @memberof V2ApiSearchAttractions
    */
    readonly source?: 'ticketmaster' | ' universe' | ' frontgate' | ' tmr'
    
    /**
    * True if you want to have entities flag as test in the response. Only, if you only wanted test entities
    * @type {'true' | ' no' | ' only'}
    * @memberof V2ApiSearchAttractions
    */
    readonly includeTest?: 'true' | ' no' | ' only'
    
    /**
    * Page number
    * @type {string}
    * @memberof V2ApiSearchAttractions
    */
    readonly page?: string
    
    /**
    * Page size of the response
    * @type {string}
    * @memberof V2ApiSearchAttractions
    */
    readonly size?: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiSearchAttractions
    */
    readonly locale?: string
    
    /**
    * Yes if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiSearchAttractions
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
    /**
    * yes, to include spell check suggestions in the response.
    * @type {'true' | ' no'}
    * @memberof V2ApiSearchAttractions
    */
    readonly includeSpellcheck?: 'true' | ' no'
    
}

/**
 * Request parameters for searchClassifications operation in V2Api.
 * @export
 * @interface V2ApiSearchClassificationsRequest
 */
export type V2ApiSearchClassificationsRequest = {
    
    /**
    * Sorting order of the search result
    * @type {string}
    * @memberof V2ApiSearchClassifications
    */
    readonly sort?: string
    
    /**
    * Keyword to search on
    * @type {string}
    * @memberof V2ApiSearchClassifications
    */
    readonly keyword?: string
    
    /**
    * Filter entities by its id
    * @type {string}
    * @memberof V2ApiSearchClassifications
    */
    readonly id?: string
    
    /**
    * Filter entities by its source name
    * @type {'ticketmaster' | ' universe' | ' frontgate' | ' tmr'}
    * @memberof V2ApiSearchClassifications
    */
    readonly source?: 'ticketmaster' | ' universe' | ' frontgate' | ' tmr'
    
    /**
    * True if you want to have entities flag as test in the response. Only, if you only wanted test entities
    * @type {'true' | ' no' | ' only'}
    * @memberof V2ApiSearchClassifications
    */
    readonly includeTest?: 'true' | ' no' | ' only'
    
    /**
    * Page number
    * @type {string}
    * @memberof V2ApiSearchClassifications
    */
    readonly page?: string
    
    /**
    * Page size of the response
    * @type {string}
    * @memberof V2ApiSearchClassifications
    */
    readonly size?: string
    
    /**
    * The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only \'en\' or \'fr\') then the first matching locale is used. When using a \'*\' it matches all locales. \'*\' can only be used at the end (e.g. \'en-us,en,*\') 
    * @type {string}
    * @memberof V2ApiSearchClassifications
    */
    readonly locale?: string
    
    /**
    * Yes if you want to display licensed content
    * @type {'true' | ' no'}
    * @memberof V2ApiSearchClassifications
    */
    readonly includeLicensedContent?: 'true' | ' no'
    
    /**
    * yes, to include spell check suggestions in the response.
    * @type {'true' | ' no'}
    * @memberof V2ApiSearchClassifications
    */
    readonly includeSpellcheck?: 'true' | ' no'
    
}

/**
 * V2ApiGenerated - object-oriented interface
 * @export
 * @class V2ApiGenerated
 * @extends {BaseAPI}
 */
export class V2ApiGenerated extends BaseAPI {
    /**
     * Find events and filter your search by location, date, availability, and much more.
     * @summary Event Search
     * @param {V2ApiEventSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public eventSearch(requestParameters: V2ApiEventSearchRequest = {}, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).eventSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find search suggestions and filter your suggestions by location, source, etc.
     * @summary Find Suggest
     * @param {V2ApiFindSuggestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public findSuggest(requestParameters: V2ApiFindSuggestRequest = {}, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).findSuggest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find venues and filter your search by name, and much more.
     * @summary Venue Search
     * @param {V2ApiFindVenuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public findVenues(requestParameters: V2ApiFindVenuesRequest = {}, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).findVenues(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for a specific attraction using the unique identifier for the attraction.
     * @summary Get Attraction Details
     * @param {V2ApiGetAttractionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public getAttractionDetails(requestParameters: V2ApiGetAttractionDetailsRequest, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).getAttractionDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for a specific segment, genre, or sub-genre using its unique identifier.
     * @summary Get Classification Details
     * @param {V2ApiGetClassificationDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public getClassificationDetails(requestParameters: V2ApiGetClassificationDetailsRequest, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).getClassificationDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.
     * @summary Get Event Details
     * @param {V2ApiGetEventDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public getEventDetails(requestParameters: V2ApiGetEventDetailsRequest, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).getEventDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get images for a specific event using the unique identifier for the event.
     * @summary Get Event Images
     * @param {V2ApiGetEventImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public getEventImages(requestParameters: V2ApiGetEventImagesRequest, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).getEventImages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for a specific genre using its unique identifier.
     * @summary Get Genre Details
     * @param {V2ApiGetGenreDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public getGenreDetails(requestParameters: V2ApiGetGenreDetailsRequest, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).getGenreDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for a specific segment using its unique identifier.
     * @summary Get Segment Details
     * @param {V2ApiGetSegmentDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public getSegmentDetails(requestParameters: V2ApiGetSegmentDetailsRequest, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).getSegmentDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for a specific sub-genre using its unique identifier.
     * @summary Get Sub-Genre Details
     * @param {V2ApiGetSubgenreDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public getSubgenreDetails(requestParameters: V2ApiGetSubgenreDetailsRequest, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).getSubgenreDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for a specific venue using the unique identifier for the venue.
     * @summary Get Venue Details
     * @param {V2ApiGetVenueDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public getVenueDetails(requestParameters: V2ApiGetVenueDetailsRequest, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).getVenueDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.
     * @summary Attraction Search
     * @param {V2ApiSearchAttractionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public searchAttractions(requestParameters: V2ApiSearchAttractionsRequest = {}, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).searchAttractions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.
     * @summary Classification Search
     * @param {V2ApiSearchClassificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApiGenerated
     */
    public searchClassifications(requestParameters: V2ApiSearchClassificationsRequest = {}, options?: AxiosRequestConfig) {
        return V2ApiFp(this.configuration).searchClassifications(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
